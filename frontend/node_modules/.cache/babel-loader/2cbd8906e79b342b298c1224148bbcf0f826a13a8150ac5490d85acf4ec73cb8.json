{"ast":null,"code":"var _jsxFileName = \"/home/adnim1/Desktop/IAI-CAPSTONE/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { sender: \"bot\", text: \"Hello! I am your Campus Helpdesk Bot. How can I help you today?\" }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify({ message: input })\n//     });\n//     const data = await response.json();\n//     const botMessage = { sender: \"bot\", text: data.reply };\n//     setMessages(prev => [...prev, botMessage]);\n//     setInput(\"\");\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\") handleSend();\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">Campus Helpdesk Chatbot</div>\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, idx) => (\n//           <div key={idx} className={msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}>\n//             <div className=\"bubble\">{msg.text}</div>\n//           </div>\n//         ))}\n//         <div ref={messagesEndRef} />\n//       </div>\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           placeholder=\"Type your message...\"\n//           onChange={(e) => setInput(e.target.value)}\n//           onKeyDown={handleKeyPress}\n//         />\n//         <button onClick={handleSend}>Send</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n//#2\n// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { \n//       sender: \"bot\", \n//       text: \"Hello! I'm your Campus Helpdesk Assistant. I can help you with timetables, faculty information, fees, hostel details, library hours, and more. How can I assist you today?\" \n//     }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const [isTyping, setIsTyping] = useState(false);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n\n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     setInput(\"\");\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: input })\n//       });\n//       const data = await response.json();\n\n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     }\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\" && !e.shiftKey) {\n//       e.preventDefault();\n//       handleSend();\n//     }\n//   };\n\n//   const quickActions = [\n//     \"View my timetable\",\n//     \"Faculty information\",\n//     \"Check fees\",\n//     \"Library hours\"\n//   ];\n\n//   const handleQuickAction = (action) => {\n//     setInput(action);\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"chat-wrapper\">\n//         <div className=\"chat-container\">\n//           <div className=\"chat-header\">\n//             <div className=\"header-content\">\n//               <div className=\"bot-avatar\">\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 5C13.66 5 15 6.34 15 8C15 9.66 13.66 11 12 11C10.34 11 9 9.66 9 8C9 6.34 10.34 5 12 5ZM12 19.2C9.5 19.2 7.29 17.92 6 15.98C6.03 13.99 10 12.9 12 12.9C13.99 12.9 17.97 13.99 18 15.98C16.71 17.92 14.5 19.2 12 19.2Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </div>\n//               <div className=\"header-text\">\n//                 <h1>Campus Helpdesk</h1>\n//                 <p className=\"status\"><span className=\"status-dot\"></span>Online</p>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.length === 1 && (\n//               <div className=\"quick-actions\">\n//                 <p className=\"quick-actions-title\">Quick Actions:</p>\n//                 <div className=\"action-buttons\">\n//                   {quickActions.map((action, idx) => (\n//                     <button \n//                       key={idx} \n//                       className=\"action-btn\"\n//                       onClick={() => handleQuickAction(action)}\n//                     >\n//                       {action}\n//                     </button>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n\n//             {messages.map((msg, idx) => (\n//               <div key={idx} className={`message ${msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}`}>\n//                 {msg.sender === \"bot\" && (\n//                   <div className=\"message-avatar bot-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//                 <div className=\"bubble\">\n//                   <div className=\"bubble-text\">{msg.text}</div>\n//                   <div className=\"message-time\">\n//                     {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}\n//                   </div>\n//                 </div>\n//                 {msg.sender === \"user\" && (\n//                   <div className=\"message-avatar user-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n\n//             {isTyping && (\n//               <div className=\"message message-bot\">\n//                 <div className=\"message-avatar bot-icon\">\n//                   <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                     <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                   </svg>\n//                 </div>\n//                 <div className=\"bubble typing-indicator\">\n//                   <span></span>\n//                   <span></span>\n//                   <span></span>\n//                 </div>\n//               </div>\n//             )}\n\n//             <div ref={messagesEndRef} />\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <div className=\"input-wrapper\">\n//               <input\n//                 type=\"text\"\n//                 value={input}\n//                 placeholder=\"Type your message...\"\n//                 onChange={(e) => setInput(e.target.value)}\n//                 onKeyDown={handleKeyPress}\n//                 disabled={isTyping}\n//               />\n//               <button \n//                 onClick={handleSend} \n//                 disabled={!input.trim() || isTyping}\n//                 className=\"send-btn\"\n//               >\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n//@2\n// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { \n//       sender: \"bot\", \n//       text: \"Hello! I'm your Campus Helpdesk Assistant. I can help you with timetables, faculty information, fees, hostel details, library hours, and more. How can I assist you today?\" \n//     }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const [isTyping, setIsTyping] = useState(false);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n\n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     setInput(\"\");\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: input })\n//       });\n//       const data = await response.json();\n\n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     }\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\" && !e.shiftKey) {\n//       e.preventDefault();\n//       handleSend();\n//     }\n//   };\n\n//   const quickActions = [\n//     \"View my timetable\",\n//     \"Faculty information\",\n//     \"Check fees\",\n//     \"Library hours\"\n//   ];\n\n//   const handleQuickAction = async (action) => {\n//     setInput(action);\n\n//     const userMessage = { sender: \"user\", text: action };\n//     setMessages(prev => [...prev, userMessage]);\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: action })\n//       });\n//       const data = await response.json();\n\n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//         setInput(\"\");\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//         setInput(\"\");\n//       }, 500);\n//     }\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"chat-wrapper\">\n//         <div className=\"chat-container\">\n//           <div className=\"chat-header\">\n//             <div className=\"header-content\">\n//               <div className=\"bot-avatar\">\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 5C13.66 5 15 6.34 15 8C15 9.66 13.66 11 12 11C10.34 11 9 9.66 9 8C9 6.34 10.34 5 12 5ZM12 19.2C9.5 19.2 7.29 17.92 6 15.98C6.03 13.99 10 12.9 12 12.9C13.99 12.9 17.97 13.99 18 15.98C16.71 17.92 14.5 19.2 12 19.2Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </div>\n//               <div className=\"header-text\">\n//                 <h1>Campus Helpdesk</h1>\n//                 <p className=\"status\"><span className=\"status-dot\"></span>Online</p>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.length === 1 && (\n//               <div className=\"quick-actions\">\n//                 <p className=\"quick-actions-title\">Quick Actions:</p>\n//                 <div className=\"action-buttons\">\n//                   {quickActions.map((action, idx) => (\n//                     <button \n//                       key={idx} \n//                       className=\"action-btn\"\n//                       onClick={() => handleQuickAction(action)}\n//                     >\n//                       {action}\n//                     </button>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n\n//             {messages.map((msg, idx) => (\n//               <div key={idx} className={`message ${msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}`}>\n//                 {msg.sender === \"bot\" && (\n//                   <div className=\"message-avatar bot-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//                 <div className=\"bubble\">\n//                   <div className=\"bubble-text\">{msg.text}</div>\n//                   <div className=\"message-time\">\n//                     {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}\n//                   </div>\n//                 </div>\n//                 {msg.sender === \"user\" && (\n//                   <div className=\"message-avatar user-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n\n//             {isTyping && (\n//               <div className=\"message message-bot\">\n//                 <div className=\"message-avatar bot-icon\">\n//                   <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                     <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                   </svg>\n//                 </div>\n//                 <div className=\"bubble typing-indicator\">\n//                   <span></span>\n//                   <span></span>\n//                   <span></span>\n//                 </div>\n//               </div>\n//             )}\n\n//             <div ref={messagesEndRef} />\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <div className=\"input-wrapper\">\n//               <input\n//                 type=\"text\"\n//                 value={input}\n//                 placeholder=\"Type your message...\"\n//                 onChange={(e) => setInput(e.target.value)}\n//                 onKeyDown={handleKeyPress}\n//                 disabled={isTyping}\n//               />\n//               <button \n//                 onClick={handleSend} \n//                 disabled={!input.trim() || isTyping}\n//                 className=\"send-btn\"\n//               >\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// #3 - fully designed css using claude\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello! I'm your Campus Helpdesk Assistant. I can help you with timetables, faculty information, fees, hostel details, library hours, and more. How can I assist you today?\",\n    timestamp: new Date()\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const [showHistory, setShowHistory] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  useEffect(() => {\n    const saved = localStorage.getItem('chatHistory');\n    if (saved) {\n      try {\n        setChatHistory(JSON.parse(saved));\n      } catch (e) {\n        console.error('Failed to load history');\n      }\n    }\n    const savedTheme = localStorage.getItem('darkMode');\n    if (savedTheme) {\n      setDarkMode(savedTheme === 'true');\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('darkMode', darkMode);\n    document.body.classList.toggle('dark-mode', darkMode);\n  }, [darkMode]);\n  const saveToHistory = (userMsg, botMsg) => {\n    const historyItem = {\n      id: Date.now(),\n      user: userMsg,\n      bot: botMsg,\n      timestamp: new Date().toISOString()\n    };\n    const newHistory = [historyItem, ...chatHistory].slice(0, 50);\n    setChatHistory(newHistory);\n    localStorage.setItem('chatHistory', JSON.stringify(newHistory));\n  };\n  const clearHistory = () => {\n    setChatHistory([]);\n    localStorage.removeItem('chatHistory');\n  };\n  const loadHistoryItem = item => {\n    setMessages([{\n      sender: \"bot\",\n      text: \"Hello! I'm your Campus Helpdesk Assistant. How can I assist you today?\",\n      timestamp: new Date()\n    }, {\n      sender: \"user\",\n      text: item.user,\n      timestamp: new Date(item.timestamp)\n    }, {\n      sender: \"bot\",\n      text: item.bot,\n      timestamp: new Date(item.timestamp)\n    }]);\n    setShowHistory(false);\n  };\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      sender: \"user\",\n      text: input,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    const userText = input;\n    setInput(\"\");\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userText\n        })\n      });\n      const data = await response.json();\n      setTimeout(() => {\n        const botMessage = {\n          sender: \"bot\",\n          text: data.reply,\n          timestamp: new Date()\n        };\n        setMessages(prev => [...prev, botMessage]);\n        setIsTyping(false);\n        saveToHistory(userText, data.reply);\n      }, 500);\n    } catch (error) {\n      setTimeout(() => {\n        const errorMessage = {\n          sender: \"bot\",\n          text: \"Sorry, I'm having trouble connecting. Please try again later.\",\n          timestamp: new Date()\n        };\n        setMessages(prev => [...prev, errorMessage]);\n        setIsTyping(false);\n      }, 500);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n  const quickActions = [\"View my timetable\", \"Faculty information\", \"Check fees\", \"Library hours\"];\n  const handleQuickAction = async action => {\n    const userMessage = {\n      sender: \"user\",\n      text: action,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: action\n        })\n      });\n      const data = await response.json();\n      setTimeout(() => {\n        const botMessage = {\n          sender: \"bot\",\n          text: data.reply,\n          timestamp: new Date()\n        };\n        setMessages(prev => [...prev, botMessage]);\n        setIsTyping(false);\n        saveToHistory(action, data.reply);\n      }, 500);\n    } catch (error) {\n      setTimeout(() => {\n        const errorMessage = {\n          sender: \"bot\",\n          text: \"Sorry, I'm having trouble connecting. Please try again later.\",\n          timestamp: new Date()\n        };\n        setMessages(prev => [...prev, errorMessage]);\n        setIsTyping(false);\n      }, 500);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bot-avatar\",\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\",\n                  fill: \"currentColor\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 614,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-text\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"IAI Capstone\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 620,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"batch-info\",\n                children: \"Batch-01 \\u2022 Section-14\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 621,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowHistory(!showHistory),\n              className: \"icon-btn\",\n              title: \"Chat History\",\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                stroke: \"currentColor\",\n                strokeWidth: \"2\",\n                children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 628,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M3 3v5h5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 629,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M12 7v5l4 2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 630,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setDarkMode(!darkMode),\n              className: \"icon-btn\",\n              title: \"Toggle Theme\",\n              children: darkMode ? /*#__PURE__*/_jsxDEV(\"svg\", {\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                stroke: \"currentColor\",\n                strokeWidth: \"2\",\n                children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                  cx: \"12\",\n                  cy: \"12\",\n                  r: \"5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 636,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M12 1v2m0 18v2M4.22 4.22l1.42 1.42m12.72 12.72 1.42 1.42M1 12h2m18 0h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 637,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 635,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                stroke: \"currentColor\",\n                strokeWidth: \"2\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 641,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 640,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 633,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 11\n        }, this), showHistory && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"history-sidebar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"history-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Chat History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"history-actions\",\n              children: [chatHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: clearHistory,\n                className: \"icon-btn-small\",\n                title: \"Clear History\",\n                children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                  viewBox: \"0 0 24 24\",\n                  fill: \"none\",\n                  stroke: \"currentColor\",\n                  strokeWidth: \"2\",\n                  children: /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M3 6h18m-2 0v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6m3 0V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 657,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 656,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 655,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setShowHistory(false),\n                className: \"icon-btn-small\",\n                children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                  viewBox: \"0 0 24 24\",\n                  fill: \"none\",\n                  stroke: \"currentColor\",\n                  strokeWidth: \"2\",\n                  children: /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M18 6 6 18M6 6l12 12\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 663,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 662,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 661,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"history-list\",\n            children: chatHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"history-empty\",\n              children: \"No chat history yet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 19\n            }, this) : chatHistory.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => loadHistoryItem(item),\n              className: \"history-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"history-user\",\n                children: item.user\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 674,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"history-bot\",\n                children: item.bot\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 675,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"history-time\",\n                children: new Date(item.timestamp).toLocaleString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 676,\n                columnNumber: 23\n              }, this)]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: [messages.length === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"quick-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"quick-actions-title\",\n              children: \"Quick Actions:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"action-buttons\",\n              children: quickActions.map((action, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"action-btn\",\n                onClick: () => handleQuickAction(action),\n                children: action\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 691,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 15\n          }, this), messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}`,\n            children: [msg.sender === \"bot\" && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-avatar bot-icon\",\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\",\n                  fill: \"currentColor\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 704,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bubble\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bubble-text\",\n                children: msg.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 709,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-time\",\n                children: msg.timestamp.toLocaleTimeString('en-US', {\n                  hour: '2-digit',\n                  minute: '2-digit'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 710,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 17\n            }, this), msg.sender === \"user\" && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-avatar user-icon\",\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z\",\n                  fill: \"currentColor\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 717,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 716,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 715,\n              columnNumber: 19\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 15\n          }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message message-bot\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-avatar bot-icon\",\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\",\n                  fill: \"currentColor\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 728,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 727,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bubble typing-indicator\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 732,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 733,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 734,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 731,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: input,\n              placeholder: \"Type your message...\",\n              onChange: e => setInput(e.target.value),\n              onKeyDown: handleKeyPress,\n              disabled: isTyping\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 745,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSend,\n              disabled: !input.trim() || isTyping,\n              className: \"send-btn\",\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                viewBox: \"0 0 24 24\",\n                fill: \"none\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\",\n                  fill: \"currentColor\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 759,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 758,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 744,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 607,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZdyItggGqO+FtGN4Lb5lIEpn0Jc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","App","_s","messages","setMessages","sender","text","timestamp","Date","input","setInput","isTyping","setIsTyping","darkMode","setDarkMode","showHistory","setShowHistory","chatHistory","setChatHistory","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","saved","localStorage","getItem","JSON","parse","e","console","error","savedTheme","setItem","document","body","classList","toggle","saveToHistory","userMsg","botMsg","historyItem","id","now","user","bot","toISOString","newHistory","slice","stringify","clearHistory","removeItem","loadHistoryItem","item","handleSend","trim","userMessage","prev","userText","response","fetch","method","headers","message","data","json","setTimeout","botMessage","reply","errorMessage","handleKeyPress","key","shiftKey","preventDefault","quickActions","handleQuickAction","action","className","children","viewBox","fill","xmlns","d","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","stroke","strokeWidth","cx","cy","r","length","map","toLocaleString","idx","msg","toLocaleTimeString","hour","minute","ref","type","value","placeholder","onChange","target","onKeyDown","disabled","_c","$RefreshReg$"],"sources":["/home/adnim1/Desktop/IAI-CAPSTONE/frontend/src/App.jsx"],"sourcesContent":["// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { sender: \"bot\", text: \"Hello! I am your Campus Helpdesk Bot. How can I help you today?\" }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify({ message: input })\n//     });\n//     const data = await response.json();\n//     const botMessage = { sender: \"bot\", text: data.reply };\n//     setMessages(prev => [...prev, botMessage]);\n//     setInput(\"\");\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\") handleSend();\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">Campus Helpdesk Chatbot</div>\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, idx) => (\n//           <div key={idx} className={msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}>\n//             <div className=\"bubble\">{msg.text}</div>\n//           </div>\n//         ))}\n//         <div ref={messagesEndRef} />\n//       </div>\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           placeholder=\"Type your message...\"\n//           onChange={(e) => setInput(e.target.value)}\n//           onKeyDown={handleKeyPress}\n//         />\n//         <button onClick={handleSend}>Send</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n//#2\n// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { \n//       sender: \"bot\", \n//       text: \"Hello! I'm your Campus Helpdesk Assistant. I can help you with timetables, faculty information, fees, hostel details, library hours, and more. How can I assist you today?\" \n//     }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const [isTyping, setIsTyping] = useState(false);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n    \n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     setInput(\"\");\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: input })\n//       });\n//       const data = await response.json();\n      \n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     }\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\" && !e.shiftKey) {\n//       e.preventDefault();\n//       handleSend();\n//     }\n//   };\n\n//   const quickActions = [\n//     \"View my timetable\",\n//     \"Faculty information\",\n//     \"Check fees\",\n//     \"Library hours\"\n//   ];\n\n//   const handleQuickAction = (action) => {\n//     setInput(action);\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"chat-wrapper\">\n//         <div className=\"chat-container\">\n//           <div className=\"chat-header\">\n//             <div className=\"header-content\">\n//               <div className=\"bot-avatar\">\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 5C13.66 5 15 6.34 15 8C15 9.66 13.66 11 12 11C10.34 11 9 9.66 9 8C9 6.34 10.34 5 12 5ZM12 19.2C9.5 19.2 7.29 17.92 6 15.98C6.03 13.99 10 12.9 12 12.9C13.99 12.9 17.97 13.99 18 15.98C16.71 17.92 14.5 19.2 12 19.2Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </div>\n//               <div className=\"header-text\">\n//                 <h1>Campus Helpdesk</h1>\n//                 <p className=\"status\"><span className=\"status-dot\"></span>Online</p>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.length === 1 && (\n//               <div className=\"quick-actions\">\n//                 <p className=\"quick-actions-title\">Quick Actions:</p>\n//                 <div className=\"action-buttons\">\n//                   {quickActions.map((action, idx) => (\n//                     <button \n//                       key={idx} \n//                       className=\"action-btn\"\n//                       onClick={() => handleQuickAction(action)}\n//                     >\n//                       {action}\n//                     </button>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n            \n//             {messages.map((msg, idx) => (\n//               <div key={idx} className={`message ${msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}`}>\n//                 {msg.sender === \"bot\" && (\n//                   <div className=\"message-avatar bot-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//                 <div className=\"bubble\">\n//                   <div className=\"bubble-text\">{msg.text}</div>\n//                   <div className=\"message-time\">\n//                     {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}\n//                   </div>\n//                 </div>\n//                 {msg.sender === \"user\" && (\n//                   <div className=\"message-avatar user-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n            \n//             {isTyping && (\n//               <div className=\"message message-bot\">\n//                 <div className=\"message-avatar bot-icon\">\n//                   <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                     <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                   </svg>\n//                 </div>\n//                 <div className=\"bubble typing-indicator\">\n//                   <span></span>\n//                   <span></span>\n//                   <span></span>\n//                 </div>\n//               </div>\n//             )}\n            \n//             <div ref={messagesEndRef} />\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <div className=\"input-wrapper\">\n//               <input\n//                 type=\"text\"\n//                 value={input}\n//                 placeholder=\"Type your message...\"\n//                 onChange={(e) => setInput(e.target.value)}\n//                 onKeyDown={handleKeyPress}\n//                 disabled={isTyping}\n//               />\n//               <button \n//                 onClick={handleSend} \n//                 disabled={!input.trim() || isTyping}\n//                 className=\"send-btn\"\n//               >\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n//@2\n// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { \n//       sender: \"bot\", \n//       text: \"Hello! I'm your Campus Helpdesk Assistant. I can help you with timetables, faculty information, fees, hostel details, library hours, and more. How can I assist you today?\" \n//     }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const [isTyping, setIsTyping] = useState(false);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n    \n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     setInput(\"\");\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: input })\n//       });\n//       const data = await response.json();\n      \n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     }\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\" && !e.shiftKey) {\n//       e.preventDefault();\n//       handleSend();\n//     }\n//   };\n\n//   const quickActions = [\n//     \"View my timetable\",\n//     \"Faculty information\",\n//     \"Check fees\",\n//     \"Library hours\"\n//   ];\n\n//   const handleQuickAction = async (action) => {\n//     setInput(action);\n    \n//     const userMessage = { sender: \"user\", text: action };\n//     setMessages(prev => [...prev, userMessage]);\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: action })\n//       });\n//       const data = await response.json();\n      \n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//         setInput(\"\");\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//         setInput(\"\");\n//       }, 500);\n//     }\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"chat-wrapper\">\n//         <div className=\"chat-container\">\n//           <div className=\"chat-header\">\n//             <div className=\"header-content\">\n//               <div className=\"bot-avatar\">\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 5C13.66 5 15 6.34 15 8C15 9.66 13.66 11 12 11C10.34 11 9 9.66 9 8C9 6.34 10.34 5 12 5ZM12 19.2C9.5 19.2 7.29 17.92 6 15.98C6.03 13.99 10 12.9 12 12.9C13.99 12.9 17.97 13.99 18 15.98C16.71 17.92 14.5 19.2 12 19.2Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </div>\n//               <div className=\"header-text\">\n//                 <h1>Campus Helpdesk</h1>\n//                 <p className=\"status\"><span className=\"status-dot\"></span>Online</p>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.length === 1 && (\n//               <div className=\"quick-actions\">\n//                 <p className=\"quick-actions-title\">Quick Actions:</p>\n//                 <div className=\"action-buttons\">\n//                   {quickActions.map((action, idx) => (\n//                     <button \n//                       key={idx} \n//                       className=\"action-btn\"\n//                       onClick={() => handleQuickAction(action)}\n//                     >\n//                       {action}\n//                     </button>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n            \n//             {messages.map((msg, idx) => (\n//               <div key={idx} className={`message ${msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}`}>\n//                 {msg.sender === \"bot\" && (\n//                   <div className=\"message-avatar bot-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//                 <div className=\"bubble\">\n//                   <div className=\"bubble-text\">{msg.text}</div>\n//                   <div className=\"message-time\">\n//                     {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}\n//                   </div>\n//                 </div>\n//                 {msg.sender === \"user\" && (\n//                   <div className=\"message-avatar user-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n            \n//             {isTyping && (\n//               <div className=\"message message-bot\">\n//                 <div className=\"message-avatar bot-icon\">\n//                   <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                     <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                   </svg>\n//                 </div>\n//                 <div className=\"bubble typing-indicator\">\n//                   <span></span>\n//                   <span></span>\n//                   <span></span>\n//                 </div>\n//               </div>\n//             )}\n            \n//             <div ref={messagesEndRef} />\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <div className=\"input-wrapper\">\n//               <input\n//                 type=\"text\"\n//                 value={input}\n//                 placeholder=\"Type your message...\"\n//                 onChange={(e) => setInput(e.target.value)}\n//                 onKeyDown={handleKeyPress}\n//                 disabled={isTyping}\n//               />\n//               <button \n//                 onClick={handleSend} \n//                 disabled={!input.trim() || isTyping}\n//                 className=\"send-btn\"\n//               >\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// #3 - fully designed css using claude\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    { \n      sender: \"bot\", \n      text: \"Hello! I'm your Campus Helpdesk Assistant. I can help you with timetables, faculty information, fees, hostel details, library hours, and more. How can I assist you today?\",\n      timestamp: new Date()\n    }\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const [showHistory, setShowHistory] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  useEffect(() => {\n    const saved = localStorage.getItem('chatHistory');\n    if (saved) {\n      try {\n        setChatHistory(JSON.parse(saved));\n      } catch (e) {\n        console.error('Failed to load history');\n      }\n    }\n    \n    const savedTheme = localStorage.getItem('darkMode');\n    if (savedTheme) {\n      setDarkMode(savedTheme === 'true');\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('darkMode', darkMode);\n    document.body.classList.toggle('dark-mode', darkMode);\n  }, [darkMode]);\n\n  const saveToHistory = (userMsg, botMsg) => {\n    const historyItem = {\n      id: Date.now(),\n      user: userMsg,\n      bot: botMsg,\n      timestamp: new Date().toISOString()\n    };\n    const newHistory = [historyItem, ...chatHistory].slice(0, 50);\n    setChatHistory(newHistory);\n    localStorage.setItem('chatHistory', JSON.stringify(newHistory));\n  };\n\n  const clearHistory = () => {\n    setChatHistory([]);\n    localStorage.removeItem('chatHistory');\n  };\n\n  const loadHistoryItem = (item) => {\n    setMessages([\n      { sender: \"bot\", text: \"Hello! I'm your Campus Helpdesk Assistant. How can I assist you today?\", timestamp: new Date() },\n      { sender: \"user\", text: item.user, timestamp: new Date(item.timestamp) },\n      { sender: \"bot\", text: item.bot, timestamp: new Date(item.timestamp) }\n    ]);\n    setShowHistory(false);\n  };\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    \n    const userMessage = { sender: \"user\", text: input, timestamp: new Date() };\n    setMessages(prev => [...prev, userMessage]);\n    const userText = input;\n    setInput(\"\");\n    setIsTyping(true);\n\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message: userText })\n      });\n      const data = await response.json();\n      \n      setTimeout(() => {\n        const botMessage = { sender: \"bot\", text: data.reply, timestamp: new Date() };\n        setMessages(prev => [...prev, botMessage]);\n        setIsTyping(false);\n        saveToHistory(userText, data.reply);\n      }, 500);\n    } catch (error) {\n      setTimeout(() => {\n        const errorMessage = { \n          sender: \"bot\", \n          text: \"Sorry, I'm having trouble connecting. Please try again later.\",\n          timestamp: new Date()\n        };\n        setMessages(prev => [...prev, errorMessage]);\n        setIsTyping(false);\n      }, 500);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const quickActions = [\n    \"View my timetable\",\n    \"Faculty information\",\n    \"Check fees\",\n    \"Library hours\"\n  ];\n\n  const handleQuickAction = async (action) => {\n    const userMessage = { sender: \"user\", text: action, timestamp: new Date() };\n    setMessages(prev => [...prev, userMessage]);\n    setIsTyping(true);\n\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message: action })\n      });\n      const data = await response.json();\n      \n      setTimeout(() => {\n        const botMessage = { sender: \"bot\", text: data.reply, timestamp: new Date() };\n        setMessages(prev => [...prev, botMessage]);\n        setIsTyping(false);\n        saveToHistory(action, data.reply);\n      }, 500);\n    } catch (error) {\n      setTimeout(() => {\n        const errorMessage = { \n          sender: \"bot\", \n          text: \"Sorry, I'm having trouble connecting. Please try again later.\",\n          timestamp: new Date()\n        };\n        setMessages(prev => [...prev, errorMessage]);\n        setIsTyping(false);\n      }, 500);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"chat-wrapper\">\n        <div className=\"chat-container\">\n          \n          {/* Header */}\n          <div className=\"chat-header\">\n            <div className=\"header-content\">\n              <div className=\"bot-avatar\">\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n                </svg>\n              </div>\n              <div className=\"header-text\">\n                <h1>IAI Capstone</h1>\n                <p className=\"batch-info\">Batch-01 • Section-14</p>\n              </div>\n            </div>\n            \n            <div className=\"header-actions\">\n              <button onClick={() => setShowHistory(!showHistory)} className=\"icon-btn\" title=\"Chat History\">\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                  <path d=\"M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8\"/>\n                  <path d=\"M3 3v5h5\"/>\n                  <path d=\"M12 7v5l4 2\"/>\n                </svg>\n              </button>\n              <button onClick={() => setDarkMode(!darkMode)} className=\"icon-btn\" title=\"Toggle Theme\">\n                {darkMode ? (\n                  <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                    <circle cx=\"12\" cy=\"12\" r=\"5\"/>\n                    <path d=\"M12 1v2m0 18v2M4.22 4.22l1.42 1.42m12.72 12.72 1.42 1.42M1 12h2m18 0h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42\"/>\n                  </svg>\n                ) : (\n                  <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                    <path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"/>\n                  </svg>\n                )}\n              </button>\n            </div>\n          </div>\n\n          {/* History Sidebar */}\n          {showHistory && (\n            <div className=\"history-sidebar\">\n              <div className=\"history-header\">\n                <h3>Chat History</h3>\n                <div className=\"history-actions\">\n                  {chatHistory.length > 0 && (\n                    <button onClick={clearHistory} className=\"icon-btn-small\" title=\"Clear History\">\n                      <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                        <path d=\"M3 6h18m-2 0v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6m3 0V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"/>\n                      </svg>\n                    </button>\n                  )}\n                  <button onClick={() => setShowHistory(false)} className=\"icon-btn-small\">\n                    <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                      <path d=\"M18 6 6 18M6 6l12 12\"/>\n                    </svg>\n                  </button>\n                </div>\n              </div>\n              <div className=\"history-list\">\n                {chatHistory.length === 0 ? (\n                  <div className=\"history-empty\">No chat history yet</div>\n                ) : (\n                  chatHistory.map(item => (\n                    <div key={item.id} onClick={() => loadHistoryItem(item)} className=\"history-item\">\n                      <p className=\"history-user\">{item.user}</p>\n                      <p className=\"history-bot\">{item.bot}</p>\n                      <p className=\"history-time\">{new Date(item.timestamp).toLocaleString()}</p>\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Messages */}\n          <div className=\"chat-messages\">\n            {messages.length === 1 && (\n              <div className=\"quick-actions\">\n                <p className=\"quick-actions-title\">Quick Actions:</p>\n                <div className=\"action-buttons\">\n                  {quickActions.map((action, idx) => (\n                    <button key={idx} className=\"action-btn\" onClick={() => handleQuickAction(action)}>\n                      {action}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {messages.map((msg, idx) => (\n              <div key={idx} className={`message ${msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}`}>\n                {msg.sender === \"bot\" && (\n                  <div className=\"message-avatar bot-icon\">\n                    <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n                    </svg>\n                  </div>\n                )}\n                <div className=\"bubble\">\n                  <div className=\"bubble-text\">{msg.text}</div>\n                  <div className=\"message-time\">\n                    {msg.timestamp.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}\n                  </div>\n                </div>\n                {msg.sender === \"user\" && (\n                  <div className=\"message-avatar user-icon\">\n                    <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z\" fill=\"currentColor\"/>\n                    </svg>\n                  </div>\n                )}\n              </div>\n            ))}\n            \n            {isTyping && (\n              <div className=\"message message-bot\">\n                <div className=\"message-avatar bot-icon\">\n                  <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n                  </svg>\n                </div>\n                <div className=\"bubble typing-indicator\">\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </div>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Input */}\n          <div className=\"chat-input\">\n            <div className=\"input-wrapper\">\n              <input\n                type=\"text\"\n                value={input}\n                placeholder=\"Type your message...\"\n                onChange={(e) => setInput(e.target.value)}\n                onKeyDown={handleKeyPress}\n                disabled={isTyping}\n              />\n              <button \n                onClick={handleSend} \n                disabled={!input.trim() || isTyping}\n                className=\"send-btn\"\n              >\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,CACvC;IACES,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE,4KAA4K;IAClLC,SAAS,EAAE,IAAIC,IAAI,CAAC;EACtB,CAAC,CACF,CAAC;EACF,MAAM,CAACC,KAAK,EAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}