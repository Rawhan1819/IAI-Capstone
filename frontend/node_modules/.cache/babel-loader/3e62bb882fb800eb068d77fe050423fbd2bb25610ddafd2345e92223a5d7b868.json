{"ast":null,"code":"// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { sender: \"bot\", text: \"Hello! I am your Campus Helpdesk Bot. How can I help you today?\" }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify({ message: input })\n//     });\n//     const data = await response.json();\n//     const botMessage = { sender: \"bot\", text: data.reply };\n//     setMessages(prev => [...prev, botMessage]);\n//     setInput(\"\");\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\") handleSend();\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">Campus Helpdesk Chatbot</div>\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, idx) => (\n//           <div key={idx} className={msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}>\n//             <div className=\"bubble\">{msg.text}</div>\n//           </div>\n//         ))}\n//         <div ref={messagesEndRef} />\n//       </div>\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           placeholder=\"Type your message...\"\n//           onChange={(e) => setInput(e.target.value)}\n//           onKeyDown={handleKeyPress}\n//         />\n//         <button onClick={handleSend}>Send</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n//#2\n// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { \n//       sender: \"bot\", \n//       text: \"Hello! I'm your Campus Helpdesk Assistant. I can help you with timetables, faculty information, fees, hostel details, library hours, and more. How can I assist you today?\" \n//     }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const [isTyping, setIsTyping] = useState(false);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n\n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     setInput(\"\");\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: input })\n//       });\n//       const data = await response.json();\n\n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     }\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\" && !e.shiftKey) {\n//       e.preventDefault();\n//       handleSend();\n//     }\n//   };\n\n//   const quickActions = [\n//     \"View my timetable\",\n//     \"Faculty information\",\n//     \"Check fees\",\n//     \"Library hours\"\n//   ];\n\n//   const handleQuickAction = (action) => {\n//     setInput(action);\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"chat-wrapper\">\n//         <div className=\"chat-container\">\n//           <div className=\"chat-header\">\n//             <div className=\"header-content\">\n//               <div className=\"bot-avatar\">\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 5C13.66 5 15 6.34 15 8C15 9.66 13.66 11 12 11C10.34 11 9 9.66 9 8C9 6.34 10.34 5 12 5ZM12 19.2C9.5 19.2 7.29 17.92 6 15.98C6.03 13.99 10 12.9 12 12.9C13.99 12.9 17.97 13.99 18 15.98C16.71 17.92 14.5 19.2 12 19.2Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </div>\n//               <div className=\"header-text\">\n//                 <h1>Campus Helpdesk</h1>\n//                 <p className=\"status\"><span className=\"status-dot\"></span>Online</p>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.length === 1 && (\n//               <div className=\"quick-actions\">\n//                 <p className=\"quick-actions-title\">Quick Actions:</p>\n//                 <div className=\"action-buttons\">\n//                   {quickActions.map((action, idx) => (\n//                     <button \n//                       key={idx} \n//                       className=\"action-btn\"\n//                       onClick={() => handleQuickAction(action)}\n//                     >\n//                       {action}\n//                     </button>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n\n//             {messages.map((msg, idx) => (\n//               <div key={idx} className={`message ${msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}`}>\n//                 {msg.sender === \"bot\" && (\n//                   <div className=\"message-avatar bot-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//                 <div className=\"bubble\">\n//                   <div className=\"bubble-text\">{msg.text}</div>\n//                   <div className=\"message-time\">\n//                     {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}\n//                   </div>\n//                 </div>\n//                 {msg.sender === \"user\" && (\n//                   <div className=\"message-avatar user-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n\n//             {isTyping && (\n//               <div className=\"message message-bot\">\n//                 <div className=\"message-avatar bot-icon\">\n//                   <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                     <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                   </svg>\n//                 </div>\n//                 <div className=\"bubble typing-indicator\">\n//                   <span></span>\n//                   <span></span>\n//                   <span></span>\n//                 </div>\n//               </div>\n//             )}\n\n//             <div ref={messagesEndRef} />\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <div className=\"input-wrapper\">\n//               <input\n//                 type=\"text\"\n//                 value={input}\n//                 placeholder=\"Type your message...\"\n//                 onChange={(e) => setInput(e.target.value)}\n//                 onKeyDown={handleKeyPress}\n//                 disabled={isTyping}\n//               />\n//               <button \n//                 onClick={handleSend} \n//                 disabled={!input.trim() || isTyping}\n//                 className=\"send-btn\"\n//               >\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// // #3\n// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { \n//       sender: \"bot\", \n//       text: \"Hello! I'm your Campus Helpdesk Assistant. I can help you with timetables, faculty information, fees, hostel details, library hours, and more. How can I assist you today?\" \n//     }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const [isTyping, setIsTyping] = useState(false);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n\n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     setInput(\"\");\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: input })\n//       });\n//       const data = await response.json();\n\n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     }\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\" && !e.shiftKey) {\n//       e.preventDefault();\n//       handleSend();\n//     }\n//   };\n\n//   const quickActions = [\n//     \"Monday classes for Section-14\",\n//     \"Who is my IAI faculty?\",\n//     \"Syllabus for IAI\",\n//     \"Saturday classes for section-14\"\n//   ];\n\n//   const handleQuickAction = async (action) => {\n//     setInput(action);\n\n//     const userMessage = { sender: \"user\", text: action };\n//     setMessages(prev => [...prev, userMessage]);\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: action })\n//       });\n//       const data = await response.json();\n\n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//         setInput(\"\");\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//         setInput(\"\");\n//       }, 500);\n//     }\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"chat-wrapper\">\n//         <div className=\"chat-container\">\n//           <div className=\"chat-header\">\n//             <div className=\"header-content\">\n//               <div className=\"bot-avatar\">\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 5C13.66 5 15 6.34 15 8C15 9.66 13.66 11 12 11C10.34 11 9 9.66 9 8C9 6.34 10.34 5 12 5ZM12 19.2C9.5 19.2 7.29 17.92 6 15.98C6.03 13.99 10 12.9 12 12.9C13.99 12.9 17.97 13.99 18 15.98C16.71 17.92 14.5 19.2 12 19.2Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </div>\n//               <div className=\"header-text\">\n//                 <h1>Campus Helpdesk</h1>\n//                 <p className=\"status\"><span className=\"status-dot\"></span>Online</p>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.length === 1 && (\n//               <div className=\"quick-actions\">\n//                 <p className=\"quick-actions-title\">Quick Actions:</p>\n//                 <div className=\"action-buttons\">\n//                   {quickActions.map((action, idx) => (\n//                     <button \n//                       key={idx} \n//                       className=\"action-btn\"\n//                       onClick={() => handleQuickAction(action)}\n//                     >\n//                       {action}\n//                     </button>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n\n//             {messages.map((msg, idx) => (\n//               <div key={idx} className={`message ${msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}`}>\n//                 {msg.sender === \"bot\" && (\n//                   <div className=\"message-avatar bot-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//                 <div className=\"bubble\">\n//                   <div className=\"bubble-text\">{msg.text}</div>\n//                   <div className=\"message-time\">\n//                     {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}\n//                   </div>\n//                 </div>\n//                 {msg.sender === \"user\" && (\n//                   <div className=\"message-avatar user-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n\n//             {isTyping && (\n//               <div className=\"message message-bot\">\n//                 <div className=\"message-avatar bot-icon\">\n//                   <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                     <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                   </svg>\n//                 </div>\n//                 <div className=\"bubble typing-indicator\">\n//                   <span></span>\n//                   <span></span>\n//                   <span></span>\n//                 </div>\n//               </div>\n//             )}\n\n//             <div ref={messagesEndRef} />\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <div className=\"input-wrapper\">\n//               <input\n//                 type=\"text\"\n//                 value={input}\n//                 placeholder=\"Type your message...\"\n//                 onChange={(e) => setInput(e.target.value)}\n//                 onKeyDown={handleKeyPress}\n//                 disabled={isTyping}\n//               />\n//               <button \n//                 onClick={handleSend} \n//                 disabled={!input.trim() || isTyping}\n//                 className=\"send-btn\"\n//               >\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/home/adnim1/Desktop/IAI-CAPSTONE/frontend/src/App.jsx"],"sourcesContent":["// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { sender: \"bot\", text: \"Hello! I am your Campus Helpdesk Bot. How can I help you today?\" }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify({ message: input })\n//     });\n//     const data = await response.json();\n//     const botMessage = { sender: \"bot\", text: data.reply };\n//     setMessages(prev => [...prev, botMessage]);\n//     setInput(\"\");\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\") handleSend();\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">Campus Helpdesk Chatbot</div>\n//       <div className=\"chat-messages\">\n//         {messages.map((msg, idx) => (\n//           <div key={idx} className={msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}>\n//             <div className=\"bubble\">{msg.text}</div>\n//           </div>\n//         ))}\n//         <div ref={messagesEndRef} />\n//       </div>\n//       <div className=\"chat-input\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           placeholder=\"Type your message...\"\n//           onChange={(e) => setInput(e.target.value)}\n//           onKeyDown={handleKeyPress}\n//         />\n//         <button onClick={handleSend}>Send</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n//#2\n// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { \n//       sender: \"bot\", \n//       text: \"Hello! I'm your Campus Helpdesk Assistant. I can help you with timetables, faculty information, fees, hostel details, library hours, and more. How can I assist you today?\" \n//     }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const [isTyping, setIsTyping] = useState(false);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n    \n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     setInput(\"\");\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: input })\n//       });\n//       const data = await response.json();\n      \n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     }\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\" && !e.shiftKey) {\n//       e.preventDefault();\n//       handleSend();\n//     }\n//   };\n\n//   const quickActions = [\n//     \"View my timetable\",\n//     \"Faculty information\",\n//     \"Check fees\",\n//     \"Library hours\"\n//   ];\n\n//   const handleQuickAction = (action) => {\n//     setInput(action);\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"chat-wrapper\">\n//         <div className=\"chat-container\">\n//           <div className=\"chat-header\">\n//             <div className=\"header-content\">\n//               <div className=\"bot-avatar\">\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 5C13.66 5 15 6.34 15 8C15 9.66 13.66 11 12 11C10.34 11 9 9.66 9 8C9 6.34 10.34 5 12 5ZM12 19.2C9.5 19.2 7.29 17.92 6 15.98C6.03 13.99 10 12.9 12 12.9C13.99 12.9 17.97 13.99 18 15.98C16.71 17.92 14.5 19.2 12 19.2Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </div>\n//               <div className=\"header-text\">\n//                 <h1>Campus Helpdesk</h1>\n//                 <p className=\"status\"><span className=\"status-dot\"></span>Online</p>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.length === 1 && (\n//               <div className=\"quick-actions\">\n//                 <p className=\"quick-actions-title\">Quick Actions:</p>\n//                 <div className=\"action-buttons\">\n//                   {quickActions.map((action, idx) => (\n//                     <button \n//                       key={idx} \n//                       className=\"action-btn\"\n//                       onClick={() => handleQuickAction(action)}\n//                     >\n//                       {action}\n//                     </button>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n            \n//             {messages.map((msg, idx) => (\n//               <div key={idx} className={`message ${msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}`}>\n//                 {msg.sender === \"bot\" && (\n//                   <div className=\"message-avatar bot-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//                 <div className=\"bubble\">\n//                   <div className=\"bubble-text\">{msg.text}</div>\n//                   <div className=\"message-time\">\n//                     {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}\n//                   </div>\n//                 </div>\n//                 {msg.sender === \"user\" && (\n//                   <div className=\"message-avatar user-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n            \n//             {isTyping && (\n//               <div className=\"message message-bot\">\n//                 <div className=\"message-avatar bot-icon\">\n//                   <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                     <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                   </svg>\n//                 </div>\n//                 <div className=\"bubble typing-indicator\">\n//                   <span></span>\n//                   <span></span>\n//                   <span></span>\n//                 </div>\n//               </div>\n//             )}\n            \n//             <div ref={messagesEndRef} />\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <div className=\"input-wrapper\">\n//               <input\n//                 type=\"text\"\n//                 value={input}\n//                 placeholder=\"Type your message...\"\n//                 onChange={(e) => setInput(e.target.value)}\n//                 onKeyDown={handleKeyPress}\n//                 disabled={isTyping}\n//               />\n//               <button \n//                 onClick={handleSend} \n//                 disabled={!input.trim() || isTyping}\n//                 className=\"send-btn\"\n//               >\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// // #3\n// import React, { useState, useRef, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [messages, setMessages] = useState([\n//     { \n//       sender: \"bot\", \n//       text: \"Hello! I'm your Campus Helpdesk Assistant. I can help you with timetables, faculty information, fees, hostel details, library hours, and more. How can I assist you today?\" \n//     }\n//   ]);\n//   const [input, setInput] = useState(\"\");\n//   const [isTyping, setIsTyping] = useState(false);\n//   const messagesEndRef = useRef(null);\n\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   };\n\n//   useEffect(scrollToBottom, [messages]);\n\n//   const handleSend = async () => {\n//     if (!input.trim()) return;\n    \n//     const userMessage = { sender: \"user\", text: input };\n//     setMessages(prev => [...prev, userMessage]);\n//     setInput(\"\");\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: input })\n//       });\n//       const data = await response.json();\n      \n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//       }, 500);\n//     }\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\" && !e.shiftKey) {\n//       e.preventDefault();\n//       handleSend();\n//     }\n//   };\n\n//   const quickActions = [\n//     \"Monday classes for Section-14\",\n//     \"Who is my IAI faculty?\",\n//     \"Syllabus for IAI\",\n//     \"Saturday classes for section-14\"\n//   ];\n\n//   const handleQuickAction = async (action) => {\n//     setInput(action);\n    \n//     const userMessage = { sender: \"user\", text: action };\n//     setMessages(prev => [...prev, userMessage]);\n//     setIsTyping(true);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/chat\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ message: action })\n//       });\n//       const data = await response.json();\n      \n//       setTimeout(() => {\n//         const botMessage = { sender: \"bot\", text: data.reply };\n//         setMessages(prev => [...prev, botMessage]);\n//         setIsTyping(false);\n//         setInput(\"\");\n//       }, 500);\n//     } catch (error) {\n//       setTimeout(() => {\n//         const errorMessage = { \n//           sender: \"bot\", \n//           text: \"Sorry, I'm having trouble connecting. Please try again later.\" \n//         };\n//         setMessages(prev => [...prev, errorMessage]);\n//         setIsTyping(false);\n//         setInput(\"\");\n//       }, 500);\n//     }\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"chat-wrapper\">\n//         <div className=\"chat-container\">\n//           <div className=\"chat-header\">\n//             <div className=\"header-content\">\n//               <div className=\"bot-avatar\">\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 5C13.66 5 15 6.34 15 8C15 9.66 13.66 11 12 11C10.34 11 9 9.66 9 8C9 6.34 10.34 5 12 5ZM12 19.2C9.5 19.2 7.29 17.92 6 15.98C6.03 13.99 10 12.9 12 12.9C13.99 12.9 17.97 13.99 18 15.98C16.71 17.92 14.5 19.2 12 19.2Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </div>\n//               <div className=\"header-text\">\n//                 <h1>Campus Helpdesk</h1>\n//                 <p className=\"status\"><span className=\"status-dot\"></span>Online</p>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"chat-messages\">\n//             {messages.length === 1 && (\n//               <div className=\"quick-actions\">\n//                 <p className=\"quick-actions-title\">Quick Actions:</p>\n//                 <div className=\"action-buttons\">\n//                   {quickActions.map((action, idx) => (\n//                     <button \n//                       key={idx} \n//                       className=\"action-btn\"\n//                       onClick={() => handleQuickAction(action)}\n//                     >\n//                       {action}\n//                     </button>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n            \n//             {messages.map((msg, idx) => (\n//               <div key={idx} className={`message ${msg.sender === \"user\" ? \"message-user\" : \"message-bot\"}`}>\n//                 {msg.sender === \"bot\" && (\n//                   <div className=\"message-avatar bot-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//                 <div className=\"bubble\">\n//                   <div className=\"bubble-text\">{msg.text}</div>\n//                   <div className=\"message-time\">\n//                     {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}\n//                   </div>\n//                 </div>\n//                 {msg.sender === \"user\" && (\n//                   <div className=\"message-avatar user-icon\">\n//                     <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                       <path d=\"M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z\" fill=\"currentColor\"/>\n//                     </svg>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n            \n//             {isTyping && (\n//               <div className=\"message message-bot\">\n//                 <div className=\"message-avatar bot-icon\">\n//                   <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                     <path d=\"M20 9V7C20 5.9 19.1 5 18 5H14V3H10V5H6C4.9 5 4 5.9 4 7V9C2.9 9 2 9.9 2 11V13C2 14.1 2.9 15 4 15V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V15C21.1 15 22 14.1 22 13V11C22 9.9 21.1 9 20 9ZM18 19H6V13H18V19ZM9 11C9 10.45 9.45 10 10 10C10.55 10 11 10.45 11 11C11 11.55 10.55 12 10 12C9.45 12 9 11.55 9 11ZM13 11C13 10.45 13.45 10 14 10C14.55 10 15 10.45 15 11C15 11.55 14.55 12 14 12C13.45 12 13 11.55 13 11Z\" fill=\"currentColor\"/>\n//                   </svg>\n//                 </div>\n//                 <div className=\"bubble typing-indicator\">\n//                   <span></span>\n//                   <span></span>\n//                   <span></span>\n//                 </div>\n//               </div>\n//             )}\n            \n//             <div ref={messagesEndRef} />\n//           </div>\n\n//           <div className=\"chat-input\">\n//             <div className=\"input-wrapper\">\n//               <input\n//                 type=\"text\"\n//                 value={input}\n//                 placeholder=\"Type your message...\"\n//                 onChange={(e) => setInput(e.target.value)}\n//                 onKeyDown={handleKeyPress}\n//                 disabled={isTyping}\n//               />\n//               <button \n//                 onClick={handleSend} \n//                 disabled={!input.trim() || isTyping}\n//                 className=\"send-btn\"\n//               >\n//                 <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//                   <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n//                 </svg>\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}